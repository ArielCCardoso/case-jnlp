#!/usr/bin/env sh

# The MIT License
#
#  Copyright (c) 2015-2019, CloudBees, Inc.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# Usage jenkins-agent.sh [options] -url http://jenkins [SECRET] [AGENT_NAME]
# Optional environment variables :
# * JENKINS_TUNNEL : HOST:PORT for a tunnel to route TCP traffic to jenkins host, when jenkins can't be directly accessed over network
# * JENKINS_URL : alternate jenkins URL
# * JENKINS_SECRET : agent secret, if not set as an argument
# * JENKINS_AGENT_NAME : agent name, if not set as an argument
# * JENKINS_AGENT_WORKDIR : agent work directory, if not set by optional parameter -workDir
# * JENKINS_DIRECT_CONNECTION: Connect directly to this TCP agent port, skipping the HTTP(S) connection parameter download.
#                              Value: "<HOST>:<PORT>"
# * JENKINS_INSTANCE_IDENTITY: The base64 encoded InstanceIdentity byte array of the Jenkins master. When this is set,
#                              the agent skips connecting to an HTTP(S) port for connection info.
# * JENKINS_PROTOCOLS:         Specify the remoting protocols to attempt when instanceIdentity is provided.

### Permissions
# 700 ~/.ssh
# 400 ~/.ssh/id_rsa
# 400 ~/.ssh/id_rsa.pub
# 600 ~/.ssh/config
sshDir=~/.ssh
sshPrivateKey=$sshDir/id_rsa
sshPublicKey=$sshDir/id_rsa.pub
sshConfig=$sshDir/config
gitConfig=~/.gitconfig
secretDir=/var/run/secrets
secretKey=${secretDir}/.ssh/id_rsa
secretKeyPub=${secretDir}/.ssh/id_rsa.pub
secretSshConfig=${secretDir}/.ssh/config
secretGitConfig=${secretDir}/.git/.gitconfig
if [ -d ${sshDir} ]; then
    chmod 700 ${sshDir}
    if [ -f ${sshPrivateKey} ]; then
        chmod 400 ${sshPrivateKey}
    elif [ -f ${secretKey} ]; then
        cp ${secretKey} ${sshPrivateKey} && chmod 400 ${sshPrivateKey}
    elif [ -n "${SSH_PRIVATE_KEY}" ] && [ "${SSH_PRIVATE_KEY}" != "" ]; then
        echo "${SSH_PRIVATE_KEY}" > ${sshPrivateKey} && chmod 400 ${sshPrivateKey}
    fi
    if [ -f ${sshPublicKey} ]; then
        chmod 400 ${sshPublicKey}
    elif [ -f ${secretKeyPub} ]; then
        cp ${secretKeyPub} ${sshPublicKey} && chmod 400 ${sshPublicKey}
    elif [ -n "${SSH_PUBLIC_KEY}" ] && [ "${SSH_PUBLIC_KEY}" != "" ]; then
        echo "${SSH_PUBLIC_KEY}" > ${sshPublicKey} && chmod 400 ${sshPublicKey}
    fi
    if [ -f ${sshConfig} ]; then
        chmod 600 ${sshConfig}
    elif [ -f ${secretSshConfig} ]; then
        cp ${secretSshConfig} ${sshConfig} && chmod 600 ${sshConfig}
    elif [ -n "${SSH_CONFIG}" ] && [ "${SSH_CONFIG}" != "" ]; then
        echo "${SSH_CONFIG}" > ${sshConfig} && chmod 600 ${sshConfig}
    fi
else
    mkdir ${sshDir} && chmod 700 ${sshDir}
    if [ -f ${sshPrivateKey} ]; then
        chmod 400 ${sshPrivateKey}
    elif [ -f ${secretKey} ]; then
        cp ${secretKey} ${sshPrivateKey} && chmod 400 ${sshPrivateKey}
    elif [ -n "${SSH_PRIVATE_KEY}" ] && [ "${SSH_PRIVATE_KEY}" != "" ]; then
        echo "${SSH_PRIVATE_KEY}" > ${sshPrivateKey} && chmod 400 ${sshPrivateKey}
    fi
    if [ -f ${sshPublicKey} ]; then
        chmod 400 ${sshPublicKey}
    elif [ -f ${secretKeyPub} ]; then
        cp ${secretKeyPub} ${sshPublicKey} && chmod 400 ${sshPublicKey}
    elif [ -n "${SSH_PUBLIC_KEY}" ] && [ "${SSH_PUBLIC_KEY}" != "" ]; then
        echo "${SSH_PUBLIC_KEY}" > ${sshPublicKey} && chmod 400 ${sshPublicKey}
    fi
    if [ -f ${sshConfig} ]; then
        chmod 600 ${sshConfig}
    elif [ -f ${secretSshConfig} ]; then
        cp ${secretSshConfig} ${sshConfig} && chmod 600 ${sshConfig}
    elif [ -n "${SSH_CONFIG}" ] && [ "${SSH_CONFIG}" != "" ]; then
        echo "${SSH_CONFIG}" > ${sshConfig} && chmod 600 ${sshConfig}
    fi
fi
if [ -f ${gitConfig} ]; then
    chmod 600 ${gitConfig}
elif [ -f ${secretGitConfig} ]; then
    cp ${secretGitConfig} ${gitConfig} && chmod 600 ${gitConfig}
elif [ -n "${GIT_CONFIG}" ] && [ "${GIT_CONFIG}" != "" ]; then
    echo "${GIT_CONFIG}" > ${gitConfig} && chmod 600 ${gitConfig}
fi
if [ -f ${sshPrivateKey} ]; then
    eval $(ssh-agent -s)  &&  ssh-add ${sshPrivateKey}
fi

if [ $# -eq 1 ]; then

        # if `docker run` only has one arguments, we assume user is running alternate command like `bash` to inspect the image
        exec "$@"

else

        # if -tunnel is not provided, try env vars
        case "$@" in
                *"-tunnel "*) ;;
                *)
                if [ ! -z "$JENKINS_TUNNEL" ]; then
                        TUNNEL="-tunnel $JENKINS_TUNNEL"
                fi ;;
        esac

        # if -workDir is not provided, try env vars
        if [ ! -z "$JENKINS_AGENT_WORKDIR" ]; then
                case "$@" in
                        *"-workDir"*) echo "Warning: Work directory is defined twice in command-line arguments and the environment variable" ;;
                        *)
                        WORKDIR="-workDir $JENKINS_AGENT_WORKDIR" ;;
                esac
        fi

        if [ -n "$JENKINS_URL" ]; then
                URL="-url $JENKINS_URL"
        fi

        if [ -n "$JENKINS_NAME" ]; then
                JENKINS_AGENT_NAME="$JENKINS_NAME"
        fi

        if [ -z "$JNLP_PROTOCOL_OPTS" ]; then
                echo "Warning: JnlpProtocol3 is disabled by default, use JNLP_PROTOCOL_OPTS to alter the behavior"
                JNLP_PROTOCOL_OPTS="-Dorg.jenkinsci.remoting.engine.JnlpProtocol3.disabled=true"
        fi

        if [ -n "$JENKINS_PROTOCOLS" ]; then
                PROTOCOLS="-protocols $JENKINS_PROTOCOLS"
        fi

        if [ -n "$JENKINS_DIRECT_CONNECTION" ]; then
                DIRECT="-direct $JENKINS_DIRECT_CONNECTION"
        fi

        if [ -n "$JENKINS_INSTANCE_IDENTITY" ]; then
                INSTANCE_IDENTITY="-instanceIdentity $JENKINS_INSTANCE_IDENTITY"
        fi

        # if java home is defined, use it
        JAVA_BIN="java"
        if [ "$JAVA_HOME" ]; then
                JAVA_BIN="$JAVA_HOME/bin/java"
        fi

        # if both required options are defined, do not pass the parameters
        OPT_JENKINS_SECRET=""
        if [ -n "$JENKINS_SECRET" ]; then
                case "$@" in
                        *"${JENKINS_SECRET}"*) echo "Warning: SECRET is defined twice in command-line arguments and the environment variable" ;;
                        *)
                        OPT_JENKINS_SECRET="${JENKINS_SECRET}" ;;
                esac
        fi

        OPT_JENKINS_AGENT_NAME=""
        if [ -n "$JENKINS_AGENT_NAME" ]; then
                case "$@" in
                        *"${JENKINS_AGENT_NAME}"*) echo "Warning: AGENT_NAME is defined twice in command-line arguments and the environment variable" ;;
                        *)
                        OPT_JENKINS_AGENT_NAME="${JENKINS_AGENT_NAME}" ;;
                esac
        fi

        #TODO: Handle the case when the command-line and Environment variable contain different values.
        #It is fine it blows up for now since it should lead to an error anyway.

        exec $JAVA_BIN $JAVA_OPTS $JNLP_PROTOCOL_OPTS -cp /usr/share/jenkins/agent.jar hudson.remoting.jnlp.Main -headless $TUNNEL $URL $WORKDIR $DIRECT $PROTOCOLS $INSTANCE_IDENTITY $OPT_JENKINS_SECRET $OPT_JENKINS_AGENT_NAME "$@"
fi